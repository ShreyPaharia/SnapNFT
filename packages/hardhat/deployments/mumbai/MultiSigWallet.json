{
  "address": "0x5654740BF119bdC3214485e82D73358E56d7B759",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        },
        {
          "internalType": "contract CashflowTokens",
          "name": "_cashflowTokens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "ExecutionFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Rejection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "SupplierAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "SupplierRemoval",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "addSupplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "decisions",
      "outputs": [
        {
          "internalType": "enum MultiSigWallet.decision",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeRejection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTransactions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "invoiceHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "legalContractHash",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "anchor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "supplier",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "invoiceAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentDate",
              "type": "uint256"
            },
            {
              "internalType": "enum MultiSigWallet.decision",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct MultiSigWallet.Transaction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_decisions",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSuppliers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MultiSigWallet.decision",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "enum MultiSigWallet.decision",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isRejected",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSupplier",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "rejectTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "removeSupplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeDecision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "invoiceHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "legalContractHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "anchor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentDate",
          "type": "uint256"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "suppliers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "string",
          "name": "invoiceHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "legalContractHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "anchor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentDate",
          "type": "uint256"
        },
        {
          "internalType": "enum MultiSigWallet.decision",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x442ecc5bf9a4f7827afe2c1213fa327706128378b261d1f538ea848bc837b722",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5654740BF119bdC3214485e82D73358E56d7B759",
    "transactionIndex": 0,
    "gasUsed": "2579733",
    "logsBloom": "0x
    "blockHash": "0xbd8ad2cc51077bc5c2bfd0164dbfea31c2983cad6ec247425ddf304b291db478",
    "transactionHash": "0x442ecc5bf9a4f7827afe2c1213fa327706128378b261d1f538ea848bc837b722",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17427321,
        "transactionHash": "0x442ecc5bf9a4f7827afe2c1213fa327706128378b261d1f538ea848bc837b722",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000112f39ad8691c000000000000000000000000000000000000000000000000005411e2abf6ec64000000000000000000000000000000000000000000000000000c6c2c55c3dac1f000000000000000000000000000000000000000000000000052feef111e8348000000000000000000000000000000000000000000000000000d7f1ff09c43ddf0",
        "logIndex": 0,
        "blockHash": "0xbd8ad2cc51077bc5c2bfd0164dbfea31c2983cad6ec247425ddf304b291db478"
      }
    ],
    "blockNumber": 17427321,
    "cumulativeGasUsed": "2579733",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x3aC9dD168e7Faf91211097E55116008Ce2c222f5"
    ],
    1,
    "0xE076341997771AB62fe184d1101BCd78d18053e2"
  ],
  "solcInputHash": "56e65aeb26df081ffb690a7149abf769",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"contract CashflowTokens\",\"name\":\"_cashflowTokens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Rejection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"SupplierAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"SupplierRemoval\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"addSupplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decisions\",\"outputs\":[{\"internalType\":\"enum MultiSigWallet.decision\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeRejection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"invoiceHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"legalContractHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDate\",\"type\":\"uint256\"},{\"internalType\":\"enum MultiSigWallet.decision\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct MultiSigWallet.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_decisions\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuppliers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MultiSigWallet.decision\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"enum MultiSigWallet.decision\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isRejected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupplier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"rejectTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"removeSupplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeDecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"invoiceHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"legalContractHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDate\",\"type\":\"uint256\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"suppliers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"invoiceHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"legalContractHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDate\",\"type\":\"uint256\"},{\"internalType\":\"enum MultiSigWallet.decision\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Stefan George - <stefan.george@consensys.net>\",\"kind\":\"dev\",\"methods\":{\"addOwner(address)\":{\"details\":\"Allows to add a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"changeRequirement(uint256)\":{\"details\":\"Allows to change the number of required decisions. Transaction has to be sent by wallet.\",\"params\":{\"_required\":\"Number of required decisions.\"}},\"confirmTransaction(uint256)\":{\"details\":\"Allows an owner to confirm a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"constructor\":{\"details\":\"Contract constructor sets initial owners and required number of decisions.\",\"params\":{\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required decisions.\"}},\"executeRejection(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"executeTransaction(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getOwners()\":{\"details\":\"Returns list of owners.\",\"returns\":{\"_0\":\"List of owner addresses.\"}},\"rejectTransaction(uint256)\":{\"details\":\"Allows an owner to reject a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"removeSupplier(address)\":{\"details\":\"Allows to remove an supplier. Transaction has to be sent by wallet.\",\"params\":{\"supplier\":\"Address of supplier.\"}},\"replaceOwner(address,address)\":{\"details\":\"Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\",\"params\":{\"newOwner\":\"Address of new owner.\",\"owner\":\"Address of owner to be replaced.\"}},\"revokeDecision(uint256)\":{\"details\":\"Allows an owner to revoke a confirmation for a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}}},\"title\":\"Multisignature wallet - Allows multiple parties to agree on transactions before execution.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSigWallet.sol\":\"MultiSigWallet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x09c24182fc76ee97a5c604b6ff1a8afb3648535b6ba1820c23b243a40cc792a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/CashflowTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {USDC} from './USDC.sol';\\n\\ncontract CashflowTokens is ERC1155 {\\n\\n    struct TokenMetaData {\\n        string invoiceHash;\\n        string legalContractHash;\\n        address anchor;\\n        address supplier;\\n        uint256 totalSupply;\\n        uint256 paymentDate;\\n        bool isRepaid;\\n    }\\n\\n    string public name = \\\"Cashflow Tokens\\\";\\n    string public symbol = \\\"cToken\\\";\\n    uint256 public lastTokenId;\\n    USDC public usdcToken;\\n    address public owner;\\n    mapping (uint256 => TokenMetaData) public tokenMetaData;\\n\\n    \\n\\n    //save owner address \\n    //save stablecoin class\\n\\n    constructor(USDC _usdcToken, string memory _uri) ERC1155(_uri) {\\n        lastTokenId = 0;\\n        owner = msg.sender;\\n        usdcToken = _usdcToken;\\n        // totalSupply[lastTokenId] = 1;\\n        // _mint(msg.sender, lastTokenId, 1, \\\"\\\");\\n\\n    }\\n\\n    function mint(\\n        string memory _invoiceHash,\\n        string memory _legalContractHash,\\n        address _anchor,\\n        address _supplier,\\n        uint256 _totalSupply,\\n        uint256 _paymentDate\\n    ) public returns(bool) {\\n        lastTokenId++;\\n        TokenMetaData memory lastTokenMetaData = TokenMetaData(_invoiceHash,_legalContractHash,_anchor,_supplier,_totalSupply,_paymentDate,false);\\n        tokenMetaData[lastTokenId] = lastTokenMetaData;\\n        _mint(_supplier, lastTokenId, _totalSupply, \\\"\\\");\\n        return true;\\n    }\\n\\n\\n    function repay(\\n        address _account,\\n        uint256 _tokenId\\n    ) public returns(bool) {\\n        \\n        //check balance - total balance should be greater than the total supply for the coin\\n        uint256 balance = usdcToken.balanceOf(_account);\\n        require(balance>=tokenMetaData[_tokenId].totalSupply, \\\"Balance is not enough, please make sure you have USDC\\\");\\n\\n        //transfer stablecoin from this account to owner account \\n        usdcToken.transferFrom(_account,address(this),tokenMetaData[_tokenId].totalSupply);\\n\\n        //TODO:update the status to repaid\\n        tokenMetaData[_tokenId].isRepaid = true;\\n\\n        return true;\\n\\n    }\\n\\n\\n        function repayCircle(\\n        uint256 _tokenId\\n    ) public returns(bool) {\\n        \\n        tokenMetaData[_tokenId].isRepaid = true;\\n\\n        return true;\\n\\n    }\\n\\n    function redeem(\\n        address _account,\\n        uint256 _tokenId\\n    ) public returns (bool){\\n        uint256 balance = balanceOf(_account, _tokenId);\\n\\n        //check cashflow token balance & repaid status for nft\\n        require(balance>0, \\\"No tokens available to redeem\\\");\\n        require(tokenMetaData[_tokenId].isRepaid==true,\\\"Token cannot be redeemed if not repaid\\\");\\n\\n        //burn all tokens\\n        _burn(_account,_tokenId,balance);\\n        //transfer required amount of stable coins from account to owner\\n\\n        usdcToken.transfer(_account, balance);\\n\\n        return true;\\n\\n    }\\n\\n    function decimals() public pure returns (uint8){\\n        return 18;\\n    }\\n\\n\\n    function getAllTransactions(\\n    )\\n    public\\n    view\\n    returns (TokenMetaData[] memory)\\n    {\\n        TokenMetaData[] memory _transactions = new TokenMetaData[](lastTokenId+1);\\n        for (uint256 i=0; i<=lastTokenId; i++) {\\n                _transactions[i] = tokenMetaData[i];\\n        }\\n        return _transactions;\\n    }\\n\\n    function getAllBalances(\\n        address _account\\n    )\\n    public\\n    view\\n    returns (uint256[] memory)\\n    {\\n        uint256[] memory balances = new uint256[](lastTokenId+1);\\n        for (uint256 i=0; i<=lastTokenId; i++) {\\n                balances[i] = balanceOf(_account, i);\\n        }\\n        return balances;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcd9911ad481fb9cd7383fee5b66866d41d698ed15cd64ffa1566ef3f71cd946b\",\"license\":\"MIT\"},\"contracts/MultiSigWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CashflowTokens.sol\\\";\\n\\n\\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\\n/// @author Stefan George - <stefan.george@consensys.net>\\ncontract MultiSigWallet {\\n\\n    /*\\n     *  Events\\n     */\\n    event Confirmation(address indexed sender, uint indexed transactionId);\\n    event Rejection(address indexed sender, uint indexed transactionId);\\n\\n    event Revocation(address indexed sender, uint indexed transactionId);\\n    event Submission(uint indexed transactionId);\\n    event Execution(uint indexed transactionId);\\n    event ExecutionFailure(uint indexed transactionId);\\n    event Deposit(address indexed sender, uint value);\\n    event OwnerAddition(address indexed owner);\\n    event OwnerRemoval(address indexed owner);\\n    event SupplierAddition(address indexed supplier);\\n    event SupplierRemoval(address indexed supplier);\\n    event RequirementChange(uint required);\\n\\n    /*\\n     *  Constants\\n     */\\n    uint constant public MAX_OWNER_COUNT = 50;\\n\\n    /*\\n     *  Storage\\n     */\\n    mapping (uint => Transaction) public transactions;\\n    mapping (uint => mapping (address => decision)) public decisions;\\n    mapping (address => bool) public isOwner;\\n    mapping (address => bool) public isSupplier;\\n    address[] public owners;\\n    address[] public suppliers;\\n    uint public required;\\n    uint public transactionCount;\\n    CashflowTokens private cashflowTokens;\\n\\n\\n    enum decision {\\n        PENDING,\\n        CONFIRM,\\n        REJECT\\n    }\\n    struct Transaction {\\n        string invoiceHash;\\n        string legalContractHash;\\n        address anchor;\\n        address supplier;\\n        uint256 invoiceAmount;\\n        uint256 paymentDate;\\n        decision status;\\n    }\\n\\n    /*\\n     *  Modifiers\\n     */\\n    modifier onlyWallet() {\\n        require(msg.sender == address(this));\\n        _;\\n    }\\n\\n    modifier ownerDoesNotExist(address owner) {\\n        require(!isOwner[owner], \\\"Owner Exists\\\");\\n        _;\\n    }\\n\\n    modifier ownerExists(address owner) {\\n        require(isOwner[owner],\\\"Only owner can confirm\\\");\\n        _;\\n    }\\n\\n    modifier supplierDoesNotExist(address supplier) {\\n        require(!isSupplier[supplier],\\\"Address is already a supplier\\\");\\n        _;\\n    }\\n\\n    modifier supplierExists(address supplier) {\\n        require(isSupplier[supplier],\\\"Address is not a supplier\\\");\\n        _;\\n    }\\n\\n    modifier transactionExists(uint transactionId) {\\n        require(transactions[transactionId].supplier != address(0),\\\"Txn does not exist\\\");\\n        _;\\n    }\\n\\n    modifier decided(uint transactionId, address owner) {\\n        require(decisions[transactionId][owner]!=decision.PENDING,'No decision taken');\\n        _;\\n    }\\n\\n    modifier notDecided(uint transactionId, address owner) {\\n        require(decisions[transactionId][owner]==decision.PENDING,'Decision Already taken');\\n        _;\\n    }\\n\\n\\n    modifier confirmed(uint transactionId, address owner) {\\n        require(decisions[transactionId][owner]==decision.CONFIRM,'The txn is not confirmed');\\n        _;\\n    }\\n\\n    modifier rejected(uint transactionId, address owner) {\\n        require(decisions[transactionId][owner]==decision.REJECT,'The txn is not rejected');\\n        _;\\n    }\\n\\n    modifier notConfirmed(uint transactionId, address owner) {\\n        require(decisions[transactionId][owner]!=decision.CONFIRM,\\\"Txn is confirmed\\\");\\n        _;\\n    }\\n\\n    modifier notExecuted(uint transactionId) {\\n        require(transactions[transactionId].status==decision.PENDING,\\\"Txn already Executed\\\");\\n        _;\\n    }\\n\\n    modifier notNull(address _address) {\\n        require(_address != address(0),\\\"Address is null\\\");\\n        _;\\n    }\\n\\n    modifier validRequirement(uint ownerCount, uint _required) {\\n        require(ownerCount <= MAX_OWNER_COUNT\\n        && _required <= ownerCount\\n        && _required != 0\\n            && ownerCount != 0);\\n        _;\\n    }\\n\\n    /// @dev Fallback function allows to deposit ether.\\n    receive() external payable\\n    {\\n        if (msg.value > 0)\\n            emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /*\\n     * Public functions\\n     */\\n    /// @dev Contract constructor sets initial owners and required number of decisions.\\n    /// @param _owners List of initial owners.\\n    /// @param _required Number of required decisions.\\n    constructor(address[] memory _owners, uint _required, CashflowTokens _cashflowTokens)\\n    validRequirement(_owners.length, _required)\\n    {\\n        for (uint i=0; i<_owners.length; i++) {\\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\\n            isOwner[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        required = _required;\\n        cashflowTokens = _cashflowTokens;\\n    }\\n\\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of new owner.\\n    function addOwner(address owner)\\n    public\\n    onlyWallet\\n    ownerDoesNotExist(owner)\\n    notNull(owner)\\n    validRequirement(owners.length + 1, required)\\n    {\\n        isOwner[owner] = true;\\n        owners.push(owner);\\n        emit OwnerAddition(owner);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner)\\n    public\\n    onlyWallet\\n    ownerExists(owner)\\n    {\\n        isOwner[owner] = false;\\n        for (uint i=0; i<owners.length - 1; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                break;\\n            }\\n        owners.pop();\\n        if (required > owners.length)\\n            changeRequirement(owners.length);\\n        emit OwnerRemoval(owner);\\n    }\\n\\n    function addSupplier(address supplier)\\n    public\\n    supplierDoesNotExist(supplier)\\n    notNull(supplier)\\n    validRequirement(suppliers.length + 1, required)\\n    {\\n        isSupplier[supplier] = true;\\n        suppliers.push(supplier);\\n        emit SupplierAddition(supplier);\\n    }\\n\\n    /// @dev Allows to remove an supplier. Transaction has to be sent by wallet.\\n    /// @param supplier Address of supplier.\\n    function removeSupplier(address supplier)\\n    public\\n    supplierExists(supplier)\\n    {\\n        isSupplier[supplier] = false;\\n        for (uint i=0; i<suppliers.length - 1; i++)\\n            if (suppliers[i] == supplier) {\\n                suppliers[i] = suppliers[suppliers.length - 1];\\n                break;\\n            }\\n        suppliers.pop();\\n        if (required > suppliers.length)\\n            changeRequirement(suppliers.length);\\n        emit SupplierRemoval(supplier);\\n    }\\n\\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner to be replaced.\\n    /// @param newOwner Address of new owner.\\n    function replaceOwner(address owner, address newOwner)\\n    public\\n    onlyWallet\\n    ownerExists(owner)\\n    ownerDoesNotExist(newOwner)\\n    {\\n        for (uint i=0; i<owners.length; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = newOwner;\\n                break;\\n            }\\n        isOwner[owner] = false;\\n        isOwner[newOwner] = true;\\n        emit OwnerRemoval(owner);\\n        emit OwnerAddition(newOwner);\\n    }\\n\\n    /// @dev Allows to change the number of required decisions. Transaction has to be sent by wallet.\\n    /// @param _required Number of required decisions.\\n    function changeRequirement(uint _required)\\n    public\\n    onlyWallet\\n    validRequirement(owners.length, _required)\\n    {\\n        required = _required;\\n        emit RequirementChange(_required);\\n    }\\n\\n\\n    function submitTransaction(string memory invoiceHash, string memory legalContractHash, address anchor, uint256 invoiceAmount, uint256 paymentDate)\\n    public\\n    supplierExists(msg.sender)\\n    returns (uint transactionId)\\n    {\\n        transactionId = addTransaction(invoiceHash, legalContractHash, anchor, msg.sender, invoiceAmount, paymentDate);\\n//        confirmTransaction(transactionId);\\n//        return transactionId;\\n    }\\n\\n    /// @dev Allows an owner to confirm a transaction.\\n    /// @param transactionId Transaction ID.\\n    function confirmTransaction(uint transactionId)\\n    public\\n    {\\n        decisions[transactionId][msg.sender] = decision.CONFIRM;\\n        emit Confirmation(msg.sender, transactionId);\\n        executeTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to reject a transaction.\\n    /// @param transactionId Transaction ID.\\n    function rejectTransaction(uint transactionId)\\n    public\\n    {\\n        decisions[transactionId][msg.sender] = decision.REJECT;\\n        emit Rejection(msg.sender, transactionId);\\n        executeRejection(transactionId);\\n    }\\n\\n\\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\\n    /// @param transactionId Transaction ID.\\n    function revokeDecision(uint transactionId)\\n    public\\n    ownerExists(msg.sender)\\n    decided(transactionId, msg.sender)\\n    notExecuted(transactionId)\\n    {\\n        decisions[transactionId][msg.sender] = decision.PENDING;\\n        emit Revocation(msg.sender, transactionId);\\n    }\\n\\n    /// @dev Allows anyone to execute a confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    function executeTransaction(uint transactionId)\\n    public\\n    confirmed(transactionId, msg.sender)\\n    notExecuted(transactionId)\\n    {\\n        if (isConfirmed(transactionId)) {\\n            Transaction storage txn = transactions[transactionId];\\n            txn.status = decision.CONFIRM;\\n            if (external_call(txn.invoiceHash, txn.legalContractHash, txn.anchor, txn.supplier, txn.invoiceAmount, txn.paymentDate))\\n                emit Execution(transactionId);\\n            else {\\n                emit ExecutionFailure(transactionId);\\n                txn.status = decision.PENDING;\\n            }\\n        }\\n    }\\n\\n    /// @dev Allows anyone to execute a confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    function executeRejection(uint transactionId)\\n    public\\n    rejected(transactionId, msg.sender)\\n    notExecuted(transactionId)\\n    {\\n        if (isRejected(transactionId)) {\\n            Transaction storage txn = transactions[transactionId];\\n            txn.status = decision.REJECT;\\n        }\\n    }\\n\\n    // call has been separated into its own function in order to take advantage\\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\\n    function external_call(string memory invoiceHash, string memory legalContractHash, address anchor, address supplier, uint256 totalSupply, uint256 paymentDate) internal returns (bool) {\\n        bool result;\\n        result = cashflowTokens.mint(invoiceHash, legalContractHash, anchor, supplier, totalSupply, paymentDate);\\n//        assembly {\\n//            let x := mload(0x40)   // \\\"Allocate\\\" memory for output (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n//            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\\n//            result := call(\\n//            sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\\n//            // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\\n//            // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\\n//            destination,\\n//            value,\\n//            d,\\n//            dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\\n//            x,\\n//            0                  // Output is ignored, therefore the output size is zero\\n//            )\\n//        }\\n        return result;\\n    }\\n\\n    function isConfirmed(uint transactionId)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        uint count = 0;\\n        for (uint i=0; i<owners.length; i++) {\\n            if (decisions[transactionId][owners[i]]==decision.CONFIRM)\\n                count += 1;\\n            if (count == required)\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    function isRejected(uint transactionId)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        uint count = 0;\\n        for (uint i=0; i<owners.length; i++) {\\n            if (decisions[transactionId][owners[i]]==decision.REJECT)\\n                count += 1;\\n            if (count == required)\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n    function addTransaction(string memory invoiceHash, string memory legalContractHash, address anchor, address supplier, uint256 invoiceAmount, uint256 paymentDate)\\n    internal\\n    returns (uint transactionId)\\n    {\\n        transactionId = transactionCount;\\n        transactions[transactionId] = Transaction({\\n            invoiceHash: invoiceHash,\\n            legalContractHash: legalContractHash,\\n            anchor: anchor,\\n            supplier: supplier,\\n            invoiceAmount: invoiceAmount,\\n            paymentDate: paymentDate,\\n            status: decision.PENDING\\n        });\\n        transactionCount += 1;\\n        emit Submission(transactionId);\\n    }\\n\\n    /*\\n     * Web3 call functions\\n     */\\n    function getConfirmationCount(uint transactionId)\\n    public\\n    view\\n    returns (uint count)\\n    {\\n        for (uint i=0; i<owners.length; i++)\\n            if (decisions[transactionId][owners[i]]==decision.CONFIRM)\\n                count += 1;\\n    }\\n\\n    function getTransactionCount(decision status)\\n    public\\n    view\\n    returns (uint count)\\n    {\\n        for (uint i=0; i<transactionCount; i++)\\n            if (transactions[i].status == status)\\n                count += 1;\\n\\n    }\\n\\n    /// @dev Returns list of owners.\\n    /// @return List of owner addresses.\\n    function getOwners()\\n    public\\n    view\\n    returns (address[] memory)\\n    {\\n        return owners;\\n    }\\n\\n    function getSuppliers()\\n    public\\n    view\\n    returns (address[] memory)\\n    {\\n        return suppliers;\\n    }\\n\\n    function getConfirmations(uint transactionId)\\n    public\\n    view\\n    returns (address[] memory _decisions)\\n    {\\n        address[] memory decisionsTemp = new address[](owners.length);\\n        uint count = 0;\\n        uint i;\\n        for (i=0; i<owners.length; i++)\\n            if (decisions[transactionId][owners[i]]==decision.CONFIRM) {\\n                decisionsTemp[count] = owners[i];\\n                count += 1;\\n            }\\n        _decisions = new address[](count);\\n        for (i=0; i<count; i++)\\n            _decisions[i] = decisionsTemp[i];\\n    }\\n\\n    function getTransactionIds(uint from, uint to, decision status)\\n    public\\n    view\\n    returns (uint[] memory _transactionIds)\\n    {\\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\\n        uint count = 0;\\n        uint i;\\n        for (i=0; i<transactionCount; i++)\\n            if (transactions[i].status == status)\\n            {\\n                transactionIdsTemp[count] = i;\\n                count += 1;\\n            }\\n        _transactionIds = new uint[](to - from);\\n        for (i=from; i<to; i++)\\n            _transactionIds[i - from] = transactionIdsTemp[i];\\n    }\\n\\n    function getAllTransactions()\\n    public\\n    view\\n    returns (Transaction[] memory)\\n    {\\n        Transaction[] memory _transactions = new Transaction[](transactionCount);\\n        for (uint i=0; i<transactionCount; i++) {\\n            _transactions[i] = transactions[i];\\n        }\\n        return _transactions;\\n    }\\n}\\n\",\"keccak256\":\"0xecdc879a661a5bf4f9f6fb85478ae41b39f1523b78d1743cfa7b816c00b23150\",\"license\":\"MIT\"},\"contracts/USDC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract USDC is ERC20 {\\n    \\n    string NAME = \\\"USDC\\\";\\n    string SYMBOL = \\\"USDC\\\";\\n\\n    constructor()\\n        ERC20(NAME, SYMBOL)\\n    {\\n        _mint(_msgSender(),10000000000000000000000);\\n    }\\n\\n}\",\"keccak256\":\"0x13fb6447eea23e4b8697570258b547d18bd34f84a1e3a4187ed9d891e505fd12\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f1238038062002f12833981016040819052620000349162000268565b82518260328211158015620000495750818111155b80156200005557508015155b80156200006157508115155b6200006b57600080fd5b60005b85518110156200018557600260008783815181106200009d57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161580156200010d575060006001600160a01b0316868281518110620000f957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b6200011757600080fd5b6001600260008884815181106200013e57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200017c816200035a565b9150506200006e565b5084516200019b906004906020880190620001ca565b505050600691909155600880546001600160a01b0319166001600160a01b039092169190911790555062000398565b82805482825590600052602060002090810192821562000222579160200282015b828111156200022257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001eb565b506200023092915062000234565b5090565b5b8082111562000230576000815560010162000235565b80516001600160a01b03811681146200026357600080fd5b919050565b6000806000606084860312156200027d578283fd5b83516001600160401b038082111562000294578485fd5b818601915086601f830112620002a8578485fd5b8151602082821115620002bf57620002bf62000382565b8160051b604051601f19603f83011681018181108682111715620002e757620002e762000382565b604052838152828101945085830182870184018c10156200030657898afd5b8996505b8487101562000333576200031e816200024b565b8652600196909601959483019483016200030a565b5080985050508088015195505050505062000351604085016200024b565b90509250925092565b60006000198214156200037b57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b612b6a80620003a86000396000f3fe6080604052600436106101d15760003560e01c806377af7ade116100f7578063b77bf60011610095578063d74f8edd11610064578063d74f8edd146105eb578063dc8452cd14610600578063e20056e614610616578063ee22610b1461063657600080fd5b8063b77bf60014610575578063ba51a6df1461058b578063c01a8c84146105ab578063cea23121146105cb57600080fd5b80639ace38c2116100d15780639ace38c2146104e05780639ebfddee14610513578063a0e67e2b14610540578063b5dc40c31461055557600080fd5b806377af7ade14610480578063784547a7146104a05780638b51d13f146104c057600080fd5b806327506f531161016f578063463365421161013e57806346336542146103f057806346dce9f1146104205780635e4d18e3146104405780637065cb481461046057600080fd5b806327506f531461034e5780632f54bf6e1461037057806331246b89146103a057806343516832146103ce57600080fd5b8063098f076e116101ab578063098f076e146102be5780630f5f817a146102ee578063173825d91461030e57806317df47451461032e57600080fd5b8063025e7c2714610219578063031fda881461025657806305bf37aa1461029e57600080fd5b366102145734156102125760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a25b005b600080fd5b34801561022557600080fd5b50610239610234366004612736565b610656565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026257600080fd5b5061029161027136600461274e565b600160209081526000928352604080842090915290825290205460ff1681565b60405161024d9190612968565b3480156102aa57600080fd5b506102126102b9366004612736565b610680565b3480156102ca57600080fd5b506102de6102d9366004612736565b6106d7565b604051901515815260200161024d565b3480156102fa57600080fd5b50610212610309366004612626565b6107a6565b34801561031a57600080fd5b50610212610329366004612626565b6109cd565b34801561033a57600080fd5b50610212610349366004612626565b610bcf565b34801561035a57600080fd5b50610363610d54565b60405161024d919061285e565b34801561037c57600080fd5b506102de61038b366004612626565b60026020526000908152604090205460ff1681565b3480156103ac57600080fd5b506103c06103bb366004612699565b610fcd565b60405190815260200161024d565b3480156103da57600080fd5b506103e3611055565b60405161024d9190612811565b3480156103fc57600080fd5b506102de61040b366004612626565b60036020526000908152604090205460ff1681565b34801561042c57600080fd5b5061021261043b366004612736565b6110b7565b34801561044c57600080fd5b5061021261045b366004612736565b6111db565b34801561046c57600080fd5b5061021261047b366004612626565b61132d565b34801561048c57600080fd5b506103c061049b3660046126b3565b6114ad565b3480156104ac57600080fd5b506102de6104bb366004612736565b611524565b3480156104cc57600080fd5b506103c06104db366004612736565b6115e9565b3480156104ec57600080fd5b506105006104fb366004612736565b611699565b60405161024d97969594939291906129d0565b34801561051f57600080fd5b5061053361052e366004612770565b6117f4565b60405161024d9190612930565b34801561054c57600080fd5b506103e36119e3565b34801561056157600080fd5b506103e3610570366004612736565b611a43565b34801561058157600080fd5b506103c060075481565b34801561059757600080fd5b506102126105a6366004612736565b611c9f565b3480156105b757600080fd5b506102126105c6366004612736565b611d1c565b3480156105d757600080fd5b506102396105e6366004612736565b611d72565b3480156105f757600080fd5b506103c0603281565b34801561060c57600080fd5b506103c060065481565b34801561062257600080fd5b50610212610631366004612647565b611d82565b34801561064257600080fd5b50610212610651366004612736565b611f76565b6004818154811061066657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000818152600160209081526040808320338085529252808320805460ff191660021790555183927f310fda14a1b3763badba87b2ca73948d00cc14d8fa2d6ee19a67ac90fa9afa6791a36106d4816110b7565b50565b600080805b60045481101561079c5760026000858152600160205260408120600480549192918590811061071b57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16600281111561076257634e487b7160e01b600052602160045260246000fd5b141561077657610773600183612a89565b91505b60065482141561078a575060019392505050565b8061079481612aed565b9150506106dc565b5060009392505050565b6001600160a01b038116600090815260036020526040902054819060ff166108115760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b99034b9903737ba10309039bab8383634b2b960391b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152600360205260408120805460ff191690555b60055461084190600190612aa1565b81101561093b57826001600160a01b03166005828154811061087357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610929576005805461089e90600190612aa1565b815481106108bc57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600580546001600160a01b0390921691839081106108f657634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061093b565b8061093381612aed565b915050610832565b50600580548061095b57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b031916905501905560055460065411156109955760055461099590611c9f565b6040516001600160a01b038316907feff77ad4786c56672b3d97fd4c375ff7b16f04e9b070a6ffed49da1572b300e490600090a25050565b3330146109d957600080fd5b6001600160a01b038116600090815260026020526040902054819060ff16610a135760405162461bcd60e51b815260040161080890612a2b565b6001600160a01b0382166000908152600260205260408120805460ff191690555b600454610a4390600190612aa1565b811015610b3d57826001600160a01b031660048281548110610a7557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610b2b5760048054610aa090600190612aa1565b81548110610abe57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600480546001600160a01b039092169183908110610af857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610b3d565b80610b3581612aed565b915050610a34565b506004805480610b5d57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b03191690550190556004546006541115610b9757600454610b9790611c9f565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b6001600160a01b038116600090815260036020526040902054819060ff1615610c3a5760405162461bcd60e51b815260206004820152601d60248201527f4164647265737320697320616c7265616479206120737570706c6965720000006044820152606401610808565b816001600160a01b038116610c835760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc81a5cc81b9d5b1b608a1b6044820152606401610808565b600554610c91906001612a89565b60065460328211158015610ca55750818111155b8015610cb057508015155b8015610cbb57508115155b610cc457600080fd5b6001600160a01b038516600081815260036020526040808220805460ff1916600190811790915560058054918201815583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191684179055517f832bbe32e7c8fcebb79f2b495d2342d4aee6ad7411ee0aae797a49ff22e44f179190a25050505050565b6060600060075467ffffffffffffffff811115610d8157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610dba57816020015b610da761246e565b815260200190600190039081610d9f5790505b50905060005b600754811015610fc75760008181526020819052604090819020815160e08101909252805482908290610df290612ab8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1e90612ab8565b8015610e6b5780601f10610e4057610100808354040283529160200191610e6b565b820191906000526020600020905b815481529060010190602001808311610e4e57829003601f168201915b50505050508152602001600182018054610e8490612ab8565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb090612ab8565b8015610efd5780601f10610ed257610100808354040283529160200191610efd565b820191906000526020600020905b815481529060010190602001808311610ee057829003601f168201915b50505091835250506002828101546001600160a01b03908116602084015260038401541660408301526004830154606083015260058301546080830152600683015460a09092019160ff1690811115610f6657634e487b7160e01b600052602160045260246000fd5b6002811115610f8557634e487b7160e01b600052602160045260246000fd5b81525050828281518110610fa957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610fbf90612aed565b915050610dc0565b50919050565b6000805b600754811015610fc757826002811115610ffb57634e487b7160e01b600052602160045260246000fd5b60008281526020819052604090206006015460ff16600281111561102f57634e487b7160e01b600052602160045260246000fd5b141561104357611040600183612a89565b91505b8061104d81612aed565b915050610fd1565b606060058054806020026020016040519081016040528092919081815260200182805480156110ad57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161108f575b5050505050905090565b8033600260008381526001602090815260408083206001600160a01b038616845290915290205460ff16600281111561110057634e487b7160e01b600052602160045260246000fd5b1461114d5760405162461bcd60e51b815260206004820152601760248201527f5468652074786e206973206e6f742072656a65637465640000000000000000006044820152606401610808565b826000808281526020819052604090206006015460ff16600281111561118357634e487b7160e01b600052602160045260246000fd5b146111a05760405162461bcd60e51b815260040161080890612a5b565b6111a9846106d7565b156111d55760008481526020819052604090206006810180546002919060ff19166001835b0217905550505b50505050565b3360008181526002602052604090205460ff1661120a5760405162461bcd60e51b815260040161080890612a2b565b600082815260016020908152604080832033808552925282205484929060ff16600281111561124957634e487b7160e01b600052602160045260246000fd5b141561128b5760405162461bcd60e51b81526020600482015260116024820152702737903232b1b4b9b4b7b7103a30b5b2b760791b6044820152606401610808565b836000808281526020819052604090206006015460ff1660028111156112c157634e487b7160e01b600052602160045260246000fd5b146112de5760405162461bcd60e51b815260040161080890612a5b565b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b33301461133957600080fd5b6001600160a01b038116600090815260026020526040902054819060ff16156113935760405162461bcd60e51b815260206004820152600c60248201526b4f776e65722045786973747360a01b6044820152606401610808565b816001600160a01b0381166113dc5760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc81a5cc81b9d5b1b608a1b6044820152606401610808565b6004546113ea906001612a89565b600654603282111580156113fe5750818111155b801561140957508015155b801561141457508115155b61141d57600080fd5b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560048054918201815583527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b3360008181526003602052604081205490919060ff1661150b5760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b99034b9903737ba10309039bab8383634b2b960391b6044820152606401610808565b61151987878733888861224d565b979650505050505050565b600080805b60045481101561079c5760016000858152600160205260408120600480549192918590811061156857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1660028111156115af57634e487b7160e01b600052602160045260246000fd5b14156115c3576115c0600183612a89565b91505b6006548214156115d7575060019392505050565b806115e181612aed565b915050611529565b6000805b600454811015610fc75760016000848152600160205260408120600480549192918590811061162c57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16600281111561167357634e487b7160e01b600052602160045260246000fd5b141561168757611684600183612a89565b91505b8061169181612aed565b9150506115ed565b6000602081905290815260409020805481906116b490612ab8565b80601f01602080910402602001604051908101604052809291908181526020018280546116e090612ab8565b801561172d5780601f106117025761010080835404028352916020019161172d565b820191906000526020600020905b81548152906001019060200180831161171057829003601f168201915b50505050509080600101805461174290612ab8565b80601f016020809104026020016040519081016040528092919081815260200182805461176e90612ab8565b80156117bb5780601f10611790576101008083540402835291602001916117bb565b820191906000526020600020905b81548152906001019060200180831161179e57829003601f168201915b505050600284015460038501546004860154600587015460069097015495966001600160a01b0393841696929093169450925060ff1687565b6060600060075467ffffffffffffffff81111561182157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561184a578160200160208202803683370190505b5090506000805b6007548110156119015784600281111561187b57634e487b7160e01b600052602160045260246000fd5b60008281526020819052604090206006015460ff1660028111156118af57634e487b7160e01b600052602160045260246000fd5b14156118ef57808383815181106118d657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526118ec600183612a89565b91505b806118f981612aed565b915050611851565b61190b8787612aa1565b67ffffffffffffffff81111561193157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561195a578160200160208202803683370190505b5093508690505b858110156119d95782818151811061198957634e487b7160e01b600052603260045260246000fd5b602002602001015184888361199e9190612aa1565b815181106119bc57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806119d181612aed565b915050611961565b5050509392505050565b606060048054806020026020016040519081016040528092919081815260200182805480156110ad576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161108f575050505050905090565b60045460609060009067ffffffffffffffff811115611a7257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a9b578160200160208202803683370190505b5090506000805b600454811015611bc557600160008681526001602052604081206004805491929185908110611ae157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff166002811115611b2857634e487b7160e01b600052602160045260246000fd5b1415611bb35760048181548110611b4f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316838381518110611b8d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152611bb0600183612a89565b91505b80611bbd81612aed565b915050611aa2565b8167ffffffffffffffff811115611bec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c15578160200160208202803683370190505b509350600090505b81811015611c9757828181518110611c4557634e487b7160e01b600052603260045260246000fd5b6020026020010151848281518110611c6d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280611c8f81612aed565b915050611c1d565b505050919050565b333014611cab57600080fd5b6004548160328211801590611cc05750818111155b8015611ccb57508015155b8015611cd657508115155b611cdf57600080fd5b60068390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a1505050565b6000818152600160208181526040808420338086529252808420805460ff1916909317909255905183927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36106d481611f76565b6005818154811061066657600080fd5b333014611d8e57600080fd5b6001600160a01b038216600090815260026020526040902054829060ff16611dc85760405162461bcd60e51b815260040161080890612a2b565b6001600160a01b038216600090815260026020526040902054829060ff1615611e225760405162461bcd60e51b815260206004820152600c60248201526b4f776e65722045786973747360a01b6044820152606401610808565b60005b600454811015611edc57846001600160a01b031660048281548110611e5a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611eca578360048281548110611e9757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611edc565b80611ed481612aed565b915050611e25565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b8033600160008381526001602090815260408083206001600160a01b038616845290915290205460ff166002811115611fbf57634e487b7160e01b600052602160045260246000fd5b1461200c5760405162461bcd60e51b815260206004820152601860248201527f5468652074786e206973206e6f7420636f6e6669726d656400000000000000006044820152606401610808565b826000808281526020819052604090206006015460ff16600281111561204257634e487b7160e01b600052602160045260246000fd5b1461205f5760405162461bcd60e51b815260040161080890612a5b565b61206884611524565b156111d557600084815260208190526040902060068101805460ff1916600117905580546121d090829061209b90612ab8565b80601f01602080910402602001604051908101604052809291908181526020018280546120c790612ab8565b80156121145780601f106120e957610100808354040283529160200191612114565b820191906000526020600020905b8154815290600101906020018083116120f757829003601f168201915b505050505082600101805461212890612ab8565b80601f016020809104026020016040519081016040528092919081815260200182805461215490612ab8565b80156121a15780601f10612176576101008083540402835291602001916121a1565b820191906000526020600020905b81548152906001019060200180831161218457829003601f168201915b50505060028601546003870154600488015460058901546001600160a01b0393841695509190921692506123d1565b156122055760405185907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a2612246565b60405185907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a26006810180546000919060ff19166001836111ce565b5050505050565b600060075490506040518060e00160405280888152602001878152602001866001600160a01b03168152602001856001600160a01b03168152602001848152602001838152602001600060028111156122b657634e487b7160e01b600052602160045260246000fd5b90526000828152602081815260409091208251805191926122dc928492909101906124db565b5060208281015180516122f592600185019201906124db565b506040820151600280830180546001600160a01b039384166001600160a01b0319918216179091556060850151600385018054919094169116179091556080830151600483015560a0830151600583015560c08301516006830180549192909160ff191690600190849081111561237c57634e487b7160e01b600052602160045260246000fd5b02179055509050506001600760008282546123979190612a89565b909155505060405181907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a29695505050505050565b60085460405163d2e8183960e01b815260009182916001600160a01b039091169063d2e8183990612410908b908b908b908b908b908b9060040161297c565b602060405180830381600087803b15801561242a57600080fd5b505af115801561243e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124629190612679565b98975050505050505050565b6040518060e00160405280606081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600060028111156124d657634e487b7160e01b600052602160045260246000fd5b905290565b8280546124e790612ab8565b90600052602060002090601f016020900481019282612509576000855561254f565b82601f1061252257805160ff191683800117855561254f565b8280016001018555821561254f579182015b8281111561254f578251825591602001919060010190612534565b5061255b92915061255f565b5090565b5b8082111561255b5760008155600101612560565b80356001600160a01b038116811461258b57600080fd5b919050565b80356003811061258b57600080fd5b600082601f8301126125af578081fd5b813567ffffffffffffffff808211156125ca576125ca612b1e565b604051601f8301601f19908116603f011681019082821181831017156125f2576125f2612b1e565b8160405283815286602085880101111561260a578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612637578081fd5b61264082612574565b9392505050565b60008060408385031215612659578081fd5b61266283612574565b915061267060208401612574565b90509250929050565b60006020828403121561268a578081fd5b81518015158114612640578182fd5b6000602082840312156126aa578081fd5b61264082612590565b600080600080600060a086880312156126ca578081fd5b853567ffffffffffffffff808211156126e1578283fd5b6126ed89838a0161259f565b96506020880135915080821115612702578283fd5b5061270f8882890161259f565b94505061271e60408701612574565b94979396509394606081013594506080013592915050565b600060208284031215612747578081fd5b5035919050565b60008060408385031215612760578182fd5b8235915061267060208401612574565b600080600060608486031215612784578283fd5b833592506020840135915061279b60408501612590565b90509250925092565b600381106127c257634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452815b818110156127eb576020818501810151868301820152016127cf565b818111156127fc5782602083870101525b50601f01601f19169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b818110156128525783516001600160a01b03168352928401929184019160010161282d565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b8381101561292257603f19898403018552815160e081518186526128aa828701826127c6565b915050888201518582038a8701526128c282826127c6565b838a01516001600160a01b03908116888c0152606080860151909116908801526080808501519088015260a0808501519088015260c09384015193909250905061290e818701846127a4565b509588019593505090860190600101612884565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156128525783518352928401929184019160010161294c565b6020810161297682846127a4565b92915050565b60c08152600061298f60c08301896127c6565b82810360208401526129a181896127c6565b6001600160a01b03978816604085015295909616606083015250608081019290925260a0909101529392505050565b60e0815260006129e360e083018a6127c6565b82810360208401526129f5818a6127c6565b6001600160a01b038981166040860152881660608501526080840187905260a084018690529150612462905060c08301846127a4565b6020808252601690820152754f6e6c79206f776e65722063616e20636f6e6669726d60501b604082015260600190565b602080825260149082015273151e1b88185b1c9958591e48115e1958dd5d195960621b604082015260600190565b60008219821115612a9c57612a9c612b08565b500190565b600082821015612ab357612ab3612b08565b500390565b600181811c90821680612acc57607f821691505b60208210811415610fc757634e487b7160e01b600052602260045260246000fd5b6000600019821415612b0157612b01612b08565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220933a40deec4094db7cc5274740c104266ed77ef938957b6d6c191a90823e0e7a64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c806377af7ade116100f7578063b77bf60011610095578063d74f8edd11610064578063d74f8edd146105eb578063dc8452cd14610600578063e20056e614610616578063ee22610b1461063657600080fd5b8063b77bf60014610575578063ba51a6df1461058b578063c01a8c84146105ab578063cea23121146105cb57600080fd5b80639ace38c2116100d15780639ace38c2146104e05780639ebfddee14610513578063a0e67e2b14610540578063b5dc40c31461055557600080fd5b806377af7ade14610480578063784547a7146104a05780638b51d13f146104c057600080fd5b806327506f531161016f578063463365421161013e57806346336542146103f057806346dce9f1146104205780635e4d18e3146104405780637065cb481461046057600080fd5b806327506f531461034e5780632f54bf6e1461037057806331246b89146103a057806343516832146103ce57600080fd5b8063098f076e116101ab578063098f076e146102be5780630f5f817a146102ee578063173825d91461030e57806317df47451461032e57600080fd5b8063025e7c2714610219578063031fda881461025657806305bf37aa1461029e57600080fd5b366102145734156102125760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a25b005b600080fd5b34801561022557600080fd5b50610239610234366004612736565b610656565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026257600080fd5b5061029161027136600461274e565b600160209081526000928352604080842090915290825290205460ff1681565b60405161024d9190612968565b3480156102aa57600080fd5b506102126102b9366004612736565b610680565b3480156102ca57600080fd5b506102de6102d9366004612736565b6106d7565b604051901515815260200161024d565b3480156102fa57600080fd5b50610212610309366004612626565b6107a6565b34801561031a57600080fd5b50610212610329366004612626565b6109cd565b34801561033a57600080fd5b50610212610349366004612626565b610bcf565b34801561035a57600080fd5b50610363610d54565b60405161024d919061285e565b34801561037c57600080fd5b506102de61038b366004612626565b60026020526000908152604090205460ff1681565b3480156103ac57600080fd5b506103c06103bb366004612699565b610fcd565b60405190815260200161024d565b3480156103da57600080fd5b506103e3611055565b60405161024d9190612811565b3480156103fc57600080fd5b506102de61040b366004612626565b60036020526000908152604090205460ff1681565b34801561042c57600080fd5b5061021261043b366004612736565b6110b7565b34801561044c57600080fd5b5061021261045b366004612736565b6111db565b34801561046c57600080fd5b5061021261047b366004612626565b61132d565b34801561048c57600080fd5b506103c061049b3660046126b3565b6114ad565b3480156104ac57600080fd5b506102de6104bb366004612736565b611524565b3480156104cc57600080fd5b506103c06104db366004612736565b6115e9565b3480156104ec57600080fd5b506105006104fb366004612736565b611699565b60405161024d97969594939291906129d0565b34801561051f57600080fd5b5061053361052e366004612770565b6117f4565b60405161024d9190612930565b34801561054c57600080fd5b506103e36119e3565b34801561056157600080fd5b506103e3610570366004612736565b611a43565b34801561058157600080fd5b506103c060075481565b34801561059757600080fd5b506102126105a6366004612736565b611c9f565b3480156105b757600080fd5b506102126105c6366004612736565b611d1c565b3480156105d757600080fd5b506102396105e6366004612736565b611d72565b3480156105f757600080fd5b506103c0603281565b34801561060c57600080fd5b506103c060065481565b34801561062257600080fd5b50610212610631366004612647565b611d82565b34801561064257600080fd5b50610212610651366004612736565b611f76565b6004818154811061066657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000818152600160209081526040808320338085529252808320805460ff191660021790555183927f310fda14a1b3763badba87b2ca73948d00cc14d8fa2d6ee19a67ac90fa9afa6791a36106d4816110b7565b50565b600080805b60045481101561079c5760026000858152600160205260408120600480549192918590811061071b57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16600281111561076257634e487b7160e01b600052602160045260246000fd5b141561077657610773600183612a89565b91505b60065482141561078a575060019392505050565b8061079481612aed565b9150506106dc565b5060009392505050565b6001600160a01b038116600090815260036020526040902054819060ff166108115760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b99034b9903737ba10309039bab8383634b2b960391b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152600360205260408120805460ff191690555b60055461084190600190612aa1565b81101561093b57826001600160a01b03166005828154811061087357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610929576005805461089e90600190612aa1565b815481106108bc57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600580546001600160a01b0390921691839081106108f657634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061093b565b8061093381612aed565b915050610832565b50600580548061095b57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b031916905501905560055460065411156109955760055461099590611c9f565b6040516001600160a01b038316907feff77ad4786c56672b3d97fd4c375ff7b16f04e9b070a6ffed49da1572b300e490600090a25050565b3330146109d957600080fd5b6001600160a01b038116600090815260026020526040902054819060ff16610a135760405162461bcd60e51b815260040161080890612a2b565b6001600160a01b0382166000908152600260205260408120805460ff191690555b600454610a4390600190612aa1565b811015610b3d57826001600160a01b031660048281548110610a7557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610b2b5760048054610aa090600190612aa1565b81548110610abe57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600480546001600160a01b039092169183908110610af857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610b3d565b80610b3581612aed565b915050610a34565b506004805480610b5d57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b03191690550190556004546006541115610b9757600454610b9790611c9f565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b6001600160a01b038116600090815260036020526040902054819060ff1615610c3a5760405162461bcd60e51b815260206004820152601d60248201527f4164647265737320697320616c7265616479206120737570706c6965720000006044820152606401610808565b816001600160a01b038116610c835760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc81a5cc81b9d5b1b608a1b6044820152606401610808565b600554610c91906001612a89565b60065460328211158015610ca55750818111155b8015610cb057508015155b8015610cbb57508115155b610cc457600080fd5b6001600160a01b038516600081815260036020526040808220805460ff1916600190811790915560058054918201815583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191684179055517f832bbe32e7c8fcebb79f2b495d2342d4aee6ad7411ee0aae797a49ff22e44f179190a25050505050565b6060600060075467ffffffffffffffff811115610d8157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610dba57816020015b610da761246e565b815260200190600190039081610d9f5790505b50905060005b600754811015610fc75760008181526020819052604090819020815160e08101909252805482908290610df290612ab8565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1e90612ab8565b8015610e6b5780601f10610e4057610100808354040283529160200191610e6b565b820191906000526020600020905b815481529060010190602001808311610e4e57829003601f168201915b50505050508152602001600182018054610e8490612ab8565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb090612ab8565b8015610efd5780601f10610ed257610100808354040283529160200191610efd565b820191906000526020600020905b815481529060010190602001808311610ee057829003601f168201915b50505091835250506002828101546001600160a01b03908116602084015260038401541660408301526004830154606083015260058301546080830152600683015460a09092019160ff1690811115610f6657634e487b7160e01b600052602160045260246000fd5b6002811115610f8557634e487b7160e01b600052602160045260246000fd5b81525050828281518110610fa957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610fbf90612aed565b915050610dc0565b50919050565b6000805b600754811015610fc757826002811115610ffb57634e487b7160e01b600052602160045260246000fd5b60008281526020819052604090206006015460ff16600281111561102f57634e487b7160e01b600052602160045260246000fd5b141561104357611040600183612a89565b91505b8061104d81612aed565b915050610fd1565b606060058054806020026020016040519081016040528092919081815260200182805480156110ad57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161108f575b5050505050905090565b8033600260008381526001602090815260408083206001600160a01b038616845290915290205460ff16600281111561110057634e487b7160e01b600052602160045260246000fd5b1461114d5760405162461bcd60e51b815260206004820152601760248201527f5468652074786e206973206e6f742072656a65637465640000000000000000006044820152606401610808565b826000808281526020819052604090206006015460ff16600281111561118357634e487b7160e01b600052602160045260246000fd5b146111a05760405162461bcd60e51b815260040161080890612a5b565b6111a9846106d7565b156111d55760008481526020819052604090206006810180546002919060ff19166001835b0217905550505b50505050565b3360008181526002602052604090205460ff1661120a5760405162461bcd60e51b815260040161080890612a2b565b600082815260016020908152604080832033808552925282205484929060ff16600281111561124957634e487b7160e01b600052602160045260246000fd5b141561128b5760405162461bcd60e51b81526020600482015260116024820152702737903232b1b4b9b4b7b7103a30b5b2b760791b6044820152606401610808565b836000808281526020819052604090206006015460ff1660028111156112c157634e487b7160e01b600052602160045260246000fd5b146112de5760405162461bcd60e51b815260040161080890612a5b565b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b33301461133957600080fd5b6001600160a01b038116600090815260026020526040902054819060ff16156113935760405162461bcd60e51b815260206004820152600c60248201526b4f776e65722045786973747360a01b6044820152606401610808565b816001600160a01b0381166113dc5760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc81a5cc81b9d5b1b608a1b6044820152606401610808565b6004546113ea906001612a89565b600654603282111580156113fe5750818111155b801561140957508015155b801561141457508115155b61141d57600080fd5b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560048054918201815583527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b3360008181526003602052604081205490919060ff1661150b5760405162461bcd60e51b815260206004820152601960248201527820b2323932b9b99034b9903737ba10309039bab8383634b2b960391b6044820152606401610808565b61151987878733888861224d565b979650505050505050565b600080805b60045481101561079c5760016000858152600160205260408120600480549192918590811061156857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1660028111156115af57634e487b7160e01b600052602160045260246000fd5b14156115c3576115c0600183612a89565b91505b6006548214156115d7575060019392505050565b806115e181612aed565b915050611529565b6000805b600454811015610fc75760016000848152600160205260408120600480549192918590811061162c57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16600281111561167357634e487b7160e01b600052602160045260246000fd5b141561168757611684600183612a89565b91505b8061169181612aed565b9150506115ed565b6000602081905290815260409020805481906116b490612ab8565b80601f01602080910402602001604051908101604052809291908181526020018280546116e090612ab8565b801561172d5780601f106117025761010080835404028352916020019161172d565b820191906000526020600020905b81548152906001019060200180831161171057829003601f168201915b50505050509080600101805461174290612ab8565b80601f016020809104026020016040519081016040528092919081815260200182805461176e90612ab8565b80156117bb5780601f10611790576101008083540402835291602001916117bb565b820191906000526020600020905b81548152906001019060200180831161179e57829003601f168201915b505050600284015460038501546004860154600587015460069097015495966001600160a01b0393841696929093169450925060ff1687565b6060600060075467ffffffffffffffff81111561182157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561184a578160200160208202803683370190505b5090506000805b6007548110156119015784600281111561187b57634e487b7160e01b600052602160045260246000fd5b60008281526020819052604090206006015460ff1660028111156118af57634e487b7160e01b600052602160045260246000fd5b14156118ef57808383815181106118d657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526118ec600183612a89565b91505b806118f981612aed565b915050611851565b61190b8787612aa1565b67ffffffffffffffff81111561193157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561195a578160200160208202803683370190505b5093508690505b858110156119d95782818151811061198957634e487b7160e01b600052603260045260246000fd5b602002602001015184888361199e9190612aa1565b815181106119bc57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806119d181612aed565b915050611961565b5050509392505050565b606060048054806020026020016040519081016040528092919081815260200182805480156110ad576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161108f575050505050905090565b60045460609060009067ffffffffffffffff811115611a7257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a9b578160200160208202803683370190505b5090506000805b600454811015611bc557600160008681526001602052604081206004805491929185908110611ae157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff166002811115611b2857634e487b7160e01b600052602160045260246000fd5b1415611bb35760048181548110611b4f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316838381518110611b8d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152611bb0600183612a89565b91505b80611bbd81612aed565b915050611aa2565b8167ffffffffffffffff811115611bec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c15578160200160208202803683370190505b509350600090505b81811015611c9757828181518110611c4557634e487b7160e01b600052603260045260246000fd5b6020026020010151848281518110611c6d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280611c8f81612aed565b915050611c1d565b505050919050565b333014611cab57600080fd5b6004548160328211801590611cc05750818111155b8015611ccb57508015155b8015611cd657508115155b611cdf57600080fd5b60068390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a1505050565b6000818152600160208181526040808420338086529252808420805460ff1916909317909255905183927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36106d481611f76565b6005818154811061066657600080fd5b333014611d8e57600080fd5b6001600160a01b038216600090815260026020526040902054829060ff16611dc85760405162461bcd60e51b815260040161080890612a2b565b6001600160a01b038216600090815260026020526040902054829060ff1615611e225760405162461bcd60e51b815260206004820152600c60248201526b4f776e65722045786973747360a01b6044820152606401610808565b60005b600454811015611edc57846001600160a01b031660048281548110611e5a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611eca578360048281548110611e9757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611edc565b80611ed481612aed565b915050611e25565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b8033600160008381526001602090815260408083206001600160a01b038616845290915290205460ff166002811115611fbf57634e487b7160e01b600052602160045260246000fd5b1461200c5760405162461bcd60e51b815260206004820152601860248201527f5468652074786e206973206e6f7420636f6e6669726d656400000000000000006044820152606401610808565b826000808281526020819052604090206006015460ff16600281111561204257634e487b7160e01b600052602160045260246000fd5b1461205f5760405162461bcd60e51b815260040161080890612a5b565b61206884611524565b156111d557600084815260208190526040902060068101805460ff1916600117905580546121d090829061209b90612ab8565b80601f01602080910402602001604051908101604052809291908181526020018280546120c790612ab8565b80156121145780601f106120e957610100808354040283529160200191612114565b820191906000526020600020905b8154815290600101906020018083116120f757829003601f168201915b505050505082600101805461212890612ab8565b80601f016020809104026020016040519081016040528092919081815260200182805461215490612ab8565b80156121a15780601f10612176576101008083540402835291602001916121a1565b820191906000526020600020905b81548152906001019060200180831161218457829003601f168201915b50505060028601546003870154600488015460058901546001600160a01b0393841695509190921692506123d1565b156122055760405185907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a2612246565b60405185907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a26006810180546000919060ff19166001836111ce565b5050505050565b600060075490506040518060e00160405280888152602001878152602001866001600160a01b03168152602001856001600160a01b03168152602001848152602001838152602001600060028111156122b657634e487b7160e01b600052602160045260246000fd5b90526000828152602081815260409091208251805191926122dc928492909101906124db565b5060208281015180516122f592600185019201906124db565b506040820151600280830180546001600160a01b039384166001600160a01b0319918216179091556060850151600385018054919094169116179091556080830151600483015560a0830151600583015560c08301516006830180549192909160ff191690600190849081111561237c57634e487b7160e01b600052602160045260246000fd5b02179055509050506001600760008282546123979190612a89565b909155505060405181907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a29695505050505050565b60085460405163d2e8183960e01b815260009182916001600160a01b039091169063d2e8183990612410908b908b908b908b908b908b9060040161297c565b602060405180830381600087803b15801561242a57600080fd5b505af115801561243e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124629190612679565b98975050505050505050565b6040518060e00160405280606081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600060028111156124d657634e487b7160e01b600052602160045260246000fd5b905290565b8280546124e790612ab8565b90600052602060002090601f016020900481019282612509576000855561254f565b82601f1061252257805160ff191683800117855561254f565b8280016001018555821561254f579182015b8281111561254f578251825591602001919060010190612534565b5061255b92915061255f565b5090565b5b8082111561255b5760008155600101612560565b80356001600160a01b038116811461258b57600080fd5b919050565b80356003811061258b57600080fd5b600082601f8301126125af578081fd5b813567ffffffffffffffff808211156125ca576125ca612b1e565b604051601f8301601f19908116603f011681019082821181831017156125f2576125f2612b1e565b8160405283815286602085880101111561260a578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612637578081fd5b61264082612574565b9392505050565b60008060408385031215612659578081fd5b61266283612574565b915061267060208401612574565b90509250929050565b60006020828403121561268a578081fd5b81518015158114612640578182fd5b6000602082840312156126aa578081fd5b61264082612590565b600080600080600060a086880312156126ca578081fd5b853567ffffffffffffffff808211156126e1578283fd5b6126ed89838a0161259f565b96506020880135915080821115612702578283fd5b5061270f8882890161259f565b94505061271e60408701612574565b94979396509394606081013594506080013592915050565b600060208284031215612747578081fd5b5035919050565b60008060408385031215612760578182fd5b8235915061267060208401612574565b600080600060608486031215612784578283fd5b833592506020840135915061279b60408501612590565b90509250925092565b600381106127c257634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452815b818110156127eb576020818501810151868301820152016127cf565b818111156127fc5782602083870101525b50601f01601f19169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b818110156128525783516001600160a01b03168352928401929184019160010161282d565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b8381101561292257603f19898403018552815160e081518186526128aa828701826127c6565b915050888201518582038a8701526128c282826127c6565b838a01516001600160a01b03908116888c0152606080860151909116908801526080808501519088015260a0808501519088015260c09384015193909250905061290e818701846127a4565b509588019593505090860190600101612884565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156128525783518352928401929184019160010161294c565b6020810161297682846127a4565b92915050565b60c08152600061298f60c08301896127c6565b82810360208401526129a181896127c6565b6001600160a01b03978816604085015295909616606083015250608081019290925260a0909101529392505050565b60e0815260006129e360e083018a6127c6565b82810360208401526129f5818a6127c6565b6001600160a01b038981166040860152881660608501526080840187905260a084018690529150612462905060c08301846127a4565b6020808252601690820152754f6e6c79206f776e65722063616e20636f6e6669726d60501b604082015260600190565b602080825260149082015273151e1b88185b1c9958591e48115e1958dd5d195960621b604082015260600190565b60008219821115612a9c57612a9c612b08565b500190565b600082821015612ab357612ab3612b08565b500390565b600181811c90821680612acc57607f821691505b60208210811415610fc757634e487b7160e01b600052602260045260246000fd5b6000600019821415612b0157612b01612b08565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220933a40deec4094db7cc5274740c104266ed77ef938957b6d6c191a90823e0e7a64736f6c63430008040033",
  "devdoc": {
    "author": "Stefan George - <stefan.george@consensys.net>",
    "kind": "dev",
    "methods": {
      "addOwner(address)": {
        "details": "Allows to add a new owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of new owner."
        }
      },
      "changeRequirement(uint256)": {
        "details": "Allows to change the number of required decisions. Transaction has to be sent by wallet.",
        "params": {
          "_required": "Number of required decisions."
        }
      },
      "confirmTransaction(uint256)": {
        "details": "Allows an owner to confirm a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "constructor": {
        "details": "Contract constructor sets initial owners and required number of decisions.",
        "params": {
          "_owners": "List of initial owners.",
          "_required": "Number of required decisions."
        }
      },
      "executeRejection(uint256)": {
        "details": "Allows anyone to execute a confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "executeTransaction(uint256)": {
        "details": "Allows anyone to execute a confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "getOwners()": {
        "details": "Returns list of owners.",
        "returns": {
          "_0": "List of owner addresses."
        }
      },
      "rejectTransaction(uint256)": {
        "details": "Allows an owner to reject a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "removeSupplier(address)": {
        "details": "Allows to remove an supplier. Transaction has to be sent by wallet.",
        "params": {
          "supplier": "Address of supplier."
        }
      },
      "replaceOwner(address,address)": {
        "details": "Allows to replace an owner with a new owner. Transaction has to be sent by wallet.",
        "params": {
          "newOwner": "Address of new owner.",
          "owner": "Address of owner to be replaced."
        }
      },
      "revokeDecision(uint256)": {
        "details": "Allows an owner to revoke a confirmation for a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      }
    },
    "title": "Multisignature wallet - Allows multiple parties to agree on transactions before execution.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7518,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "transactions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Transaction)7566_storage)"
      },
      {
        "astId": 7525,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "decisions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(decision)7550))"
      },
      {
        "astId": 7529,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "isOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7533,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "isSupplier",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7536,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "owners",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7539,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "suppliers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7541,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "required",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7543,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "transactionCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7546,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "cashflowTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(CashflowTokens)5145"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CashflowTokens)5145": {
        "encoding": "inplace",
        "label": "contract CashflowTokens",
        "numberOfBytes": "20"
      },
      "t_enum(decision)7550": {
        "encoding": "inplace",
        "label": "enum MultiSigWallet.decision",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(decision)7550)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum MultiSigWallet.decision)",
        "numberOfBytes": "32",
        "value": "t_enum(decision)7550"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_enum(decision)7550))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => enum MultiSigWallet.decision))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_enum(decision)7550)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)7566_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSigWallet.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)7566_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)7566_storage": {
        "encoding": "inplace",
        "label": "struct MultiSigWallet.Transaction",
        "members": [
          {
            "astId": 7552,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "invoiceHash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7554,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "legalContractHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7556,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "anchor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7558,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "supplier",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7560,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "invoiceAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7562,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "paymentDate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7565,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(decision)7550"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}